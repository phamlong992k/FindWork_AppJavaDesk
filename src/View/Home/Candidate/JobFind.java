/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View.Home.Candidate;

import Entity.Account;
import Entity.RequirementJob;
import Entity.User;
import Entity.User;
import Model.RequireJobDAO;
import Model.UserDAO;
import View.Login.LoginDetailFrame;
import com.kingaspx.util.BrowserUtil;
import com.kingaspx.version.Version;
import com.teamdev.jxbrowser.chromium.Browser;
import com.teamdev.jxbrowser.chromium.dom.By;
import com.teamdev.jxbrowser.chromium.dom.DOMDocument;
import com.teamdev.jxbrowser.chromium.dom.DOMElement;
import com.teamdev.jxbrowser.chromium.dom.DOMInputElement;
import com.teamdev.jxbrowser.chromium.events.ConsoleEvent;
import com.teamdev.jxbrowser.chromium.events.FinishLoadingEvent;
import com.teamdev.jxbrowser.chromium.events.LoadAdapter;
import com.teamdev.jxbrowser.chromium.events.TitleEvent;
import com.teamdev.jxbrowser.chromium.swing.BrowserView;
import java.awt.BorderLayout;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import com.teamdev.jxbrowser.chromium.JSObject;
import com.teamdev.jxbrowser.chromium.JSArray;
import com.teamdev.jxbrowser.chromium.JSFunction;
import com.teamdev.jxbrowser.chromium.JSValue;
import java.awt.image.BufferedImage;
import java.io.File;
import java.net.MalformedURLException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Asus
 */
public class JobFind extends javax.swing.JPanel {

    private ArrayList<RequirementJob> requirement;  // contain all job'users with option (job,address)
    private ArrayList<String> phones;// contain all phone number of users with option (job,address)
    private ArrayList<Double> distances; //contain all distance by job'users and worker
    private ArrayList<Float> rate; //contain all rating by job'user and worker
    private User mainUser; //contain information about worker
    private Account account;
    private boolean refreshList; //check when cbxItems changed to prevent list load again
    private boolean isPresent; //check least a marker in map
    private boolean cvOnline;
    private boolean checkReAndRemoveMarker = true;
    private boolean checkGetDistance;

    /**
     * Creates new form JobFind
     */
    public JobFind() {
        initComponents();
    }

    public JobFind(int idUser) {
        initComponents();
        setImage();
        open_site();
        UserDAO dao = new UserDAO();
        try {
            mainUser = dao.getInforOfUser(idUser);
        } catch (SQLException ex) {
            Logger.getLogger(JobFind.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JobFind.class.getName()).log(Level.SEVERE, null, ex);
        }
        mainUser.setIdUser(idUser);
        try {
            account = dao.getAccOfUser(idUser);
            System.out.println(account);
        } catch (Exception e) {
        }
        distances = new ArrayList<>();
        rate = new ArrayList<>();
        try {
            Vector<String> job = dao.getJobData();
            cbxJob.removeAllItems();
            cbxJob.addItem("None");
            for (String string : job) {
                cbxJob.addItem(string);
            }
            // setIconforUserInMap();
        } catch (SQLException ex) {
            Logger.getLogger(JobFind.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JobFind.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setImage() {
        try {
            BufferedImage imageMain;
            imageMain = ImageIO.read(getClass().getResource("/icon/UV.png"));
            ImageIcon iconMain = new ImageIcon(imageMain.getScaledInstance(1100, 825, imageMain.SCALE_SMOOTH));
            MapLabel.setIcon(iconMain);
        } catch (IOException ex) {
            Logger.getLogger(LoginDetailFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cbxJob = new javax.swing.JComboBox<>();
        btnNearJob = new javax.swing.JButton();
        btnAroundJob = new javax.swing.JButton();
        btnRecomJob = new javax.swing.JButton();
        btnCreatCV = new javax.swing.JButton();
        map_panel = new javax.swing.JPanel();
        cbxAddress = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        MapLabel = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1110, 825));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 60)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 153, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Tìm việc");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1110, 140));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Công Việc");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, -1, -1));

        cbxJob.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        cbxJob.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Ngành công nghệ thực phẩm", "Ngành công nghệ chế biến sau thu hoạch", "Công nghệ chế biến thủy sản", "Ngành kỹ thuật dệt", "Công nghệ sợi dệt", "Ngành công nghệ may học gì và làm gì?", "Công nghệ da giầy", "Công nghệ chế biến lâm sản", "Ngành kiến trúc", "Ngành kinh tế và quản lý đô thị", "Kỹ thuật công trình biển", "Ngành kỹ thuật xây dựng", "Ngành kinh tế xây dựng", "Ngành quản lý xây dựng", "Kỹ thuật xây dựng công trình giao thông", "Công nghệ kỹ thuật công trình xây dựng", "Ngành quản trị kinh doanh", "Ngành quản trị dịch vụ du lịch và lữ hành", "Ngành quản trị khách sạn", "Ngành Marketing", "Ngành nghề môi giới bất động sản", "Ngành kinh doanh quốc tế", "Ngành kế toán", "Ngành kiểm toán", "Ngành quản trị nhân lực", "Ngành hệ thống thông tin quản lý", "Ngành quản trị văn phòng", "Ngành khoa học - máy tính", "Ngành truyền thông đa phương tiện", "Ngành kỹ thuật phần mềm", "Ngành công nghệ thông tin", "Luật kinh tế", "Luật quốc tế", "Ngành việt nam học", "Ngành ngôn ngữ Anh – Tiếng Anh", "Ngành ngôn ngữ Nga – Tiếng Nga", "Ngành ngôn ngữ Pháp – Tiếng Pháp", "Ngành ngôn ngữ Trung – Tiếng Trung", "Ngành ngôn ngữ Đức – Tiếng Đức", "Ngành ngôn ngữ Tây Ban Nha – Tiếng Tây Ban Nha", "Ngành ngôn ngữ Bồ Đào Nha – Bồ Đào Nha", "Ngành ngôn ngữ Italya – Tiếng Italya", "Ngành ngôn ngữ Nhật – Tiếng Nhật", "Ngành ngôn ngữ Hàn Quốc – Tiếng Hàn Quốc", "Ngành ngôn ngữ A rập – Tiếng Ả rập", "Ngành ngôn ngữ Quốc Tế Học", "Ngành Đông Phương Học", "Ngành Đông Nam Á học", "Ngành Trung Quốc học", "Ngành Nhật Bản học", "Ngành Hàn Quốc học", "Ngành khu vực Thái Bình Dương học", "Ngành triết học", "Ngành lịch sử học", "Ngành văn học", "Ngành văn hóa học", "Ngành quản lý văn hóa", "Ngành quản lý thể dục thể thao", "Ngành hội họa", "Ngành đồ họa", "Ngành điêu khắc", "Ngành gốm", "Ngành thiết kế công nghiệp", "Ngành thiết kế đồ họa", "Ngành thiết kế thời trang", "Ngành thiết kế nội thất", "Ngành kinh tế", "Ngành kinh tế quốc tế", "Ngành chính trị học", "Ngành xây dựng đảng chỉnh quyền và nhà nước", "Ngành quản lý nhà nước", "Ngành quan hệ quốc tế", "Ngành xã hội học", "Ngành nhân văn", "Ngành tâm lý học", "Ngành báo chí", "Ngành truyền thông đa phương tiện", "Ngành công nghệ truyền thông", "Ngành quan hệ công chúng", "Ngành thông tin học", "Ngành khoa học thư viện", "Ngành lưu trữ học", "Ngành bảo tàng học", "Ngành xuất bản", "Ngành kinh doanh xuất bản phẩm", "Ngành công nghệ sinh học", "Ngành sinh học", "Ngành kỹ thuật sinh học", "Ngành sinh học ứng dụng", "Ngành thiên văn học", "Ngành vật lý học", "Ngành hóa học", "Ngành khoa học vật liệu", "Ngành địa chất học", "Ngành địa lý tự nhiên", "Ngành khí tượng học", "Ngành thủy văn học", "Ngành hải dương học", "Ngành khoa học môi trường", "Ngành khoa học đất", "Ngành toán học", "Ngành toán ứng dụng", "Ngành thống kê", "Ngành quản lý giáo dục", "Ngành giáo dục học", "Ngành sư phạm mầm non", "Ngành giáo dục tiểu học", "Ngành giáo dục đặc biệt", "Ngành giáo dục công dân", "Ngành giáo dục chính trị", "Ngành giáo dục thể chất", "Ngành huấn luyện thể thao", "Ngành giáo dục quốc phòng – an ninh", "Ngành sư phạm toán học", "Ngành sư phạm tin học", "Ngành sư phạm vật lý", "Ngành sư phạm hóa học", "Ngành sư phạm sinh học", "Ngành sư phạm kỹ thuật công nghiệp", "Ngành sư phạm kỹ thuật nông nghiệp", "Ngành sư phạm kinh tế gia đình" }));
        cbxJob.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxJobItemStateChanged(evt);
            }
        });
        jPanel1.add(cbxJob, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 260, 230, 30));

        btnNearJob.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnNearJob.setText("Tìm Việc Làm ");
        btnNearJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNearJobActionPerformed(evt);
            }
        });
        jPanel1.add(btnNearJob, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 340, 258, 60));

        btnAroundJob.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnAroundJob.setText("Tìm Việc Quanh Đây");
        btnAroundJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAroundJobActionPerformed(evt);
            }
        });
        jPanel1.add(btnAroundJob, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 450, 258, 60));

        btnRecomJob.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnRecomJob.setText("Việc Làm Đề Xuất");
        btnRecomJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecomJobActionPerformed(evt);
            }
        });
        jPanel1.add(btnRecomJob, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 570, 258, 60));

        btnCreatCV.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnCreatCV.setText("Tạo CV Online");
        btnCreatCV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatCVActionPerformed(evt);
            }
        });
        jPanel1.add(btnCreatCV, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 690, 258, 60));

        map_panel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        map_panel.setLayout(new java.awt.BorderLayout());
        jPanel1.add(map_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 190, 700, 590));

        cbxAddress.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        cbxAddress.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "An Giang", "Bà Rịa–Vũng Tàu", "Bắc Giang", "Bắc Kạn", "Bạc Liêu", "Bắc Nin", "Bến Tre", "Bình Ðịnh", "Bình Dương", "Bình Phướcc", "Bình Thuận", "Cà Mau", "Cần Thơ", "Cao Bằng", "Ðà Nẵng", "Ðắk Lắk", "Ðắk Nông", "Ðiện Biên", "Ðồng Nai", "Ðồng Tháp", "Gia Lai", "Hà Giang", "Hà Nam", "Hà Nội", "Hà Tĩnh", "Hải Duong", "Hải Phòng", "Hậu Giang", "TP.Hồ Chí Minh", "Hòa Bình", "Hưng Yên", "Khánh Hòa", "Kiên Giang", "Kon Tum", "Lai Châu", "Lâm Ðồng", "Lạng Son", "Lào Cai", "Long An", "Nam Ðịnh", "Nghệ An", "Ninh Bình", "Ninh Thuận", "Phú Thọ", "Phú Yên", "Quảng Bình", "Quảng Nam", "Quảng Ngãi", "Quảng Ninh", "Quảng Trị", "Sóc Trăng", "Sơn La", "Tây Ninh", "Thái Bình", "Thái Nguyên", "Thanh Hóa", "Thừa Thiên–Huế", "Tiền Giang", "Trà Vinh", "Tuyên Quang", "Vinh Long", "Vinh Phúc", "Yên Bái" }));
        cbxAddress.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxAddressItemStateChanged(evt);
            }
        });
        cbxAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxAddressActionPerformed(evt);
            }
        });
        jPanel1.add(cbxAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 200, 230, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Tỉnh:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 70, -1));
        jPanel1.add(MapLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1110, 825));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 3, 1110, 825));
    }// </editor-fold>//GEN-END:initComponents
    private boolean checkValid() {
        int cbox1 = cbxJob.getSelectedIndex();
        if (cbox1 == 0) {
            return false;
        }
        return true;
    }

    private void setIconforUserInMap() {
        String icon = "marker.png";
        File file = new File(icon);
        String path = file.getAbsolutePath();
        String[] list = path.split("\\\\");
        path = "";
        for (int i = 0; i < list.length; i++) {
            if (i < list.length - 1) {
                path += list[i] + "\\\\";
            } else {
                path += list[i];
            }
        }
        browser.executeJavaScript("linkIcon = '" + path + "'");
        System.out.println(path);
    }

    private String getAddress(RequirementJob user) {
        String address = "";
        String city = user.getProvince();
        String addressTmp = user.getAddress();
        address = city + ' ' + addressTmp;
        return address;
    }

    private void threadForDistance() {
//        Thread t = new Thread(new Runnable() {
//            @Override
//            public void run() {
//                try {
//                    DOMDocument doc = browser.getDocument();
//                    DOMElement buttonRun = doc.findElement(By.id("submit1"));
//                    buttonRun.click();
//                    Thread.sleep(500);
//                    checkGetDistance = true;
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//            }
//        });
//        t.start();
        try {
            DOMDocument doc = browser.getDocument();
            DOMElement buttonRun = doc.findElement(By.id("submit1"));
            buttonRun.click();
            Thread.sleep(500);
            JSValue distance = browser.executeJavaScriptAndReturnValue("distances");
            JSArray tmp = distance.asArray();
            int size = requirement.size();
            for (int i = 0; i < size; i++) {
                double value = (tmp.get(i).getNumberValue()) / 1000;
                distances.add(value);
            }
        } catch (Exception e) {
            e.printStackTrace();
            refreshList = true;
            isPresent = true;
        }
    }

    private void loadMarker(ArrayList<String> addressList, DOMDocument doc) {
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    DOMElement address = doc.findElement(By.id("address"));
                    DOMElement button = doc.findElement(By.id("submit"));
                    DOMElement buttonRun = doc.findElement(By.id("submit1"));
                    int size = addressList.size();
                    System.out.println(size);
                    for (int i = 0; i < size; i++) {
                        String value = addressList.get(i);
                        
                        ((DOMInputElement) address).setValue(value);
                        String sdt = phones.get(i);
                        browser.executeJavaScript("phone = '" + sdt + "'");
                        button.click();
                        Thread.sleep(100);
                    }
                    Thread.sleep(1000);
                    String city = mainUser.getProvince();
                    String addresTmp = mainUser.getAddress();
                    String addres = city + ' ' + addresTmp;
                    ((DOMInputElement) address).setValue(addres);
                    browser.executeJavaScript("phone = '" + account.getPhone() + "'");
                    browser.executeJavaScript("initSeft()");
                    Thread.sleep(1000);
                    threadForDistance();
                    DOMElement div = doc.findElement(By.id("floating-panel"));
                    div.setAttribute("style", "display:visible");
                } catch (Exception e) {
                    e.printStackTrace();
                    browser.reload();
                }
            }
        });
        t.start();
    }
    private void removeMarker(ArrayList<Integer> removePos, DOMDocument doc) {
//        Thread t = new Thread(new Runnable() {
//            @Override
//            public void run() {
//                try {
//                    if (removePos == null || removePos.isEmpty()) {
//                        return;
//                    }
//                    while(!checkReAndRemoveMarker)
//                        Thread.sleep(100);
//                    DOMDocument doc = browser.getDocument();
//                    DOMElement removeButton = doc.findElement(By.id("remove"));
//                    for (Integer removePo : removePos) {
//                        browser.executeJavaScript("arrRemove.push(" + removePo + ")");
//                    }
//                    removeButton.click();
//                    Thread.sleep(1000);
//                    checkReAndRemoveMarker = false;
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//            }
//        });
//        t.start();
        DOMElement removeButton = doc.findElement(By.id("remove"));
        for (Integer removePo : removePos) {
            browser.executeJavaScript("arrRemove.push(" + removePo + ")");
        }
        removeButton.click();
    }

    private void reMarker() {
//        Thread t = new Thread(new Runnable() {
//            @Override
//            public void run() {
//                try {
//                    while(checkReAndRemoveMarker)
//                            Thread.sleep(100);
//                    DOMDocument doc = browser.getDocument();
//                    DOMElement remarkerButton = doc.findElement(By.id("add"));
//                    remarkerButton.click();
//                    Thread.sleep(500);
//                    browser.executeJavaScript("arrRemove = [];");
//                    Thread.sleep(1000);
//                    checkReAndRemoveMarker = true;
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//            }
//        });
//        t.start();
        DOMDocument doc = browser.getDocument();
        DOMElement remarkerButton = doc.findElement(By.id("add"));
        remarkerButton.click();
        browser.executeJavaScript("arrRemove = [];");
    }

    private void checkLoading() {
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    while (browser.isLoading()) {
                        Thread.sleep(100);
                    }
                    DOMDocument doc = browser.getDocument();
                    ArrayList<String> address = new ArrayList<>();
                    for (RequirementJob user : requirement) {
                        String addresTmp = getAddress(user);
                        address.add(addresTmp);
                    }
                    System.out.println(address);
                    loadMarker(address, doc);
                    Thread.sleep(500);
                    isPresent = true;
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
        });
        t.start();
    }
    private void btnNearJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNearJobActionPerformed
        // TODO add your handling code here:
        if (cvOnline) {
            browser.loadURL(getPath());
            cvOnline = false;
        }
        if (!loadDataInList()) {
            JOptionPane.showMessageDialog(this, "Choose Option again");
            return;
        }
        if (requirement == null) {
            JOptionPane.showMessageDialog(this, "Not choose option yet!");
            return;
        }
        if (isPresent) {
            reMarker();
            return;
        }
        checkLoading();
    }//GEN-LAST:event_btnNearJobActionPerformed
    private boolean loadDataInList() {
        if (!checkValid()) {
            return false;
        }
        if (refreshList) {
            requirement = new ArrayList<>();
            phones = new ArrayList<>();
            rate = new ArrayList<>();
            String job = (String) cbxJob.getSelectedItem();
            String province = (String) cbxAddress.getSelectedItem();
            UserDAO dao = new UserDAO();
            RequireJobDAO dao2 = new RequireJobDAO();
            try {
                ArrayList<RequirementJob> list = dao2.getEntityByOptionForGoogleMap(job, province);
                for (RequirementJob requirementJob : list) {
                    int id = requirementJob.getIdUser();
                    User user = dao.getInforOfUser(id);
                    Account accountTmp = dao.getAccOfUser(id);
                    String phone = accountTmp.getPhone();
                    float rating = requirementJob.getRating();
                    phones.add(phone);
                    rate.add(rating);
                }
                requirement = list;
            } catch (Exception e) {
                e.printStackTrace();
            }
            distances.clear();
            if ((isPresent && !cvOnline)) {
                browser.reload();
                isPresent = false;
            }
        }
        refreshList = false;
        return true;
    }
    private void btnAroundJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAroundJobActionPerformed
        // TODO add your handling code here:
        if (isPresent && !refreshList) {
            reMarker();
        }
        if (cvOnline) {
            browser.loadURL(getPath());
            cvOnline = false;
        }
        if (!loadDataInList()) {
            JOptionPane.showMessageDialog(this, "Choose Option again");
            return;
        }
        if (requirement == null) {
            JOptionPane.showMessageDialog(this, "Not choose option yet!");
            return;
        }
        double boundary = -1;
        try {
            boundary = Double.parseDouble(JOptionPane.showInputDialog(this, "Set boundray what you want below (km):"));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Can't set boundary (Notice)");
            return;
        }
        if (boundary <= 0) {
            JOptionPane.showMessageDialog(this, "Can't set boundary ( value must > 0 )");
            return;
        }
        if (!isPresent) {
            checkLoading();
        }
        threadForremove(boundary);
    }//GEN-LAST:event_btnAroundJobActionPerformed
    private void threadForremove(double boundary) {
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    while (!isPresent) {
                        Thread.sleep(100);
                    }
                    int size = requirement.size();
                    if (size > 0) {
                        while (distances.size() < size) {
                            Thread.sleep(100);
                        }
                    }
                    DOMDocument doc = browser.getDocument();
                    ArrayList<Integer> pos = new ArrayList<>();
                    for (int i = 0; i < size; i++) {
                        double value = distances.get(i);
                        System.out.println(value + "-" + boundary);
                        if (value > boundary) {
                            pos.add(i);
                        }
                    }
                    removeMarker(pos, doc);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
        t.start();
    }

    private void threadForRating(float rating) {
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    while (!isPresent) {
                        Thread.sleep(100);
                    }
                    int size = requirement.size();
                    if (size > 0) {
                        while (rate.size() < size) {
                            Thread.sleep(100);
                        }
                    }
                    DOMDocument doc = browser.getDocument();
                    ArrayList<Integer> pos = new ArrayList<>();
                    for (int i = 0; i < size; i++) {
                        float value = rate.get(i);
                        if (value < rating) {
                            pos.add(i);
                        }
                    }
                    removeMarker(pos, doc);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
        t.start();
    }
    private void btnRecomJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecomJobActionPerformed
        // TODO add your handling code here:
        if (isPresent && !refreshList) {
            reMarker();
        }
        if (cvOnline) {
            browser.loadURL(getPath());
            cvOnline = false;
        }
        if (!loadDataInList()) {
            JOptionPane.showMessageDialog(this, "Choose Option again");
            return;
        }
        if (requirement == null) {
            JOptionPane.showMessageDialog(this, "Not choose option yet!");
            return;
        }
        float rating = -1;
        try {
            rating = Float.parseFloat(JOptionPane.showInputDialog(this, "Set least rating what you want"));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Can't set rating (Notice)");
            return;
        }
        if (rating <= 0 || rating > 5) {
            JOptionPane.showMessageDialog(this, "Can't set boundary ( value must > 0 and <= 5)");
            return;
        }
        if (!isPresent) {
            checkLoading();
        }
        threadForRating(rating);
    }//GEN-LAST:event_btnRecomJobActionPerformed

    private void btnCreatCVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatCVActionPerformed
        // TODO add your handling code here:
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    while (browser.isLoading()) {
                        Thread.sleep(100);
                    }
                    browser.loadURL("https://zety.com/resume-templates");
                    cvOnline = true;
                    isPresent = false;
                    refreshList = true;
                } catch (Exception e) {
                }
            }
        });
        t.start();
    }//GEN-LAST:event_btnCreatCVActionPerformed

    private void cbxJobItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxJobItemStateChanged
        // TODO add your handling code here:
        refreshList = true;
    }//GEN-LAST:event_cbxJobItemStateChanged

    private void cbxAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxAddressActionPerformed

    private void cbxAddressItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxAddressItemStateChanged
        // TODO add your handling code here:
        refreshList = true;
    }//GEN-LAST:event_cbxAddressItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel MapLabel;
    private javax.swing.JButton btnAroundJob;
    private javax.swing.JButton btnCreatCV;
    private javax.swing.JButton btnNearJob;
    private javax.swing.JButton btnRecomJob;
    private javax.swing.JComboBox<String> cbxAddress;
    private javax.swing.JComboBox<String> cbxJob;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel map_panel;
    // End of variables declaration//GEN-END:variables
    Browser browser;
    BrowserView view;

    public void open_site() {
        BrowserUtil.setVersion(Version.V6_22);

        browser = new Browser();
        view = new BrowserView(browser);
        map_panel.add(view, BorderLayout.CENTER);
//        browser.addTitleListener((TitleEvent evt) -> {
//            setTitle(evt.getTitle());
//        });
        browser.addConsoleListener((ConsoleEvent ce) -> {
            System.out.println("Log: " + ce.getMessage());
        });
        browser.addLoadListener(new LoadAdapter() {
            @Override
            public void onFinishLoadingFrame(FinishLoadingEvent event) {
                event.getBrowser().setZoomLevel(0);
            }
        });

        browser.loadURL(getPath());
    }

    private String getPath() {
        File file = new File("googlemap.html");
        return file.getAbsolutePath();
    }

    private void getDistanceInList() {
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    while (!checkGetDistance) {
                        Thread.sleep(100);
                    }
                    JSValue distance = browser.executeJavaScriptAndReturnValue("distances");
                    JSArray tmp = distance.asArray();
                    int size = requirement.size();
                    for (int i = 0; i < size; i++) {
                        double value = (tmp.get(i).getNumberValue()) / 1000;
                        distances.add(value);
                    }
                    checkGetDistance = false;
                } catch (Exception e) {
                    e.printStackTrace();
                    refreshList = true;
                    isPresent = true;
                }

            }
        });
        t.start();
    }

    private void getRateInList() {
        //
    }
}
